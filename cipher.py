"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Brandon Hsu, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:ph23497
"""


# TODO: implement this function. You may delete this comment after you are done.
def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """

    result = []
    for _ in range(key):
        col = []
        for _ in range(len(string)):
            col.append("")
        result.append(col)
    z = 0
    start_row = 0
    end_row = key - 1
    up = True

    for x, letter in enumerate(string):
        result[z][x] = letter
        if z == start_row:
            up = True
        if z == end_row:
            up = False
        if up:
            z+=1
        else:
            z-=1

    #then I start traversing through 2D list
    final_string = ''
    for x in range(key):
        for y in range(len(string)):
            if result[x][y] != '':
                final_string+=result[x][y]
    return final_string


# TODO: implement this function. You may delete this comment after you are done.
def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    if string is None:
        return
    result = []
    for _ in range(key):
        col = []
        for _ in range(len(string)):
            col.append("")
        result.append(col)
    z = 0
    start_row = 0
    end_row = key - 1
    up = True

    for x in range(len(string)):
        result[z][x] = "x" #I first mark the places that i need to fill
        if z == start_row:
            up = True
        if z == end_row:
            up = False
        if up:
            z+=1
        else:
            z-=1
    index = 0
    for x in range(key):
        for y in range(len(string)):
            if result[x][y] == "x" and index < len(string):#check marked place
                result[x][y] = string[index]
                index += 1


    decoded = ""
    z = 0
    up = True
    #then start adding letters zigzagly
    for x in range(len(string)):
        decoded += result[z][x]

        if z == start_row:
            up = True
        if z == end_row:
            up = False

        if up:
            z += 1
        else:
            z -= 1

    return decoded





# TODO: implement this function. You may delete this comment after you are done.
def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    converted = ''
    for x in string:
        if x.isalpha():
            converted+=x
    converted = converted.lower()
    return converted




# TODO: implement this function. You may delete this comment after you are done.
def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    x = ((ord(s) - ord('a')) + (ord(p) - ord('a')))%26
    return chr(x + ord('a'))


# TODO: implement this function. You may delete this comment after you are done.
def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    x = ((ord(s) - ord('a')) - (ord(p) - ord('a'))) % 26 #decoding is just other way around
    #basically reversing
    return chr(x + ord('a'))


# TODO: implement this function. You may delete this comment after you are done.
def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    final = ""
    string = filter_string(string)
    phrase = filter_string(phrase)
    phrase_length = len(phrase)
    for x, letter in enumerate(string):
        y = x%phrase_length
        final+=encode_character(phrase[y], letter)
    return final



# TODO: implement this function. You may delete this comment after you are done.
def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    final = ""
    phrase_length = len(phrase)
    for x, letter in enumerate(string):
        y = x%phrase_length
        final+=decode_character(phrase[y], letter)
    return final





# TODO: implement this function. You may delete this comment after you are done.
def main():
    """Main function that reads stdin and runs each cipher"""
    # read the plain text from stdin (terminal/input)
    string = input().strip()


    # read the key from stdin (terminal/input)
    key = int(input().strip())

    # encrypt and print the encoded text using rail fence cipher
    encoded = rail_fence_encode(string, key)
    print("Rail Fence Cipher\n")
    print("Plain Text:", string)
    print("Key:", key)
    print("Encoded Text:", encoded)
    print()

    # read encoded text from stdin (terminal/input)
    string2 = input().strip()

    # read the key from stdin (terminal/input)
    key = int(input().strip())

    # decrypt and print the plain text using rail fence cipher
    decoded = rail_fence_decode(string2, key)
    print("Encoded Text:", string2)
    print("Enter Key:", key)
    print("Decoded Text:", decoded)
    print()

    # read the plain text from stdin (terminal/input)
    plain_vigenere = input().strip()

    # read the pass phrase from stdin (terminal/input)
    pass_phrase = input().strip()

    # encrypt and print the encoded text using Vigenere cipher

    vigenere_encoded = vigenere_encode(plain_vigenere, pass_phrase)
    print("Vigenere Cipher\n")
    print("Plain Text:", plain_vigenere)
    print("Pass Phrase:", pass_phrase)
    print("Encoded Text:", vigenere_encoded)
    print()

    # read the encoded text from stdin (terminal/input)
    vigenere_input_encoded = input().strip()


    # read the pass phrase from stdin (terminal/input)
    pass_phrase2 = input().strip()

    # decrypt and print the plain text using Vigenere cipher

    vigenere_decoded = vigenere_decode(vigenere_input_encoded, pass_phrase2)
    print("Encoded Text:", vigenere_input_encoded)
    print("Pass Phrase:", pass_phrase2)
    print("Decoded Text:", vigenere_decoded)



# Do NOT modify the following code.
if __name__ == "__main__":
    main()
